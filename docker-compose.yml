version: '3.1'

services:
  mongo:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo_db:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 20s
      retries: 3
    
  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - '9000:9000'
      - '9090:9090'
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=ADMIN12345
      - MINIO_ROOT_PASSWORD=ADMIN12345
    command: server /data --console-address ":9090"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    #   interval: 30s
    #   timeout: 20s
    #   retries: 3
  mysql:
    image: mysql
    container_name: mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'gandaya'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'gandayaAdmin'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql
# Names our volume
volumes:
  my-db:
  minio_data:
  mongo_db:


